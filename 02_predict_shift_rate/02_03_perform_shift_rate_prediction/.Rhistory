library(terra)
library(pbapply)
library(gstat)
rm(list=ls())
gc()
#
# get missing species
range.pres.path <- 'missed_species_range_pres/'
files <- list.files(range.pres.path)
spsname <- grepl('.tif$', '', files)
nsps     <- length(spsname)
#
# read elevation and latitudinal warming velocity files
warm.rate.lat <- terra::rast('maps/warm_vel_lat2024.tif')
setwd("/Users/junnawang/UCDLab/Biodiversity/pre_post_processing/02_predict_shift_rate/02_01_process_data_for_shift_rate_prediction/")
library(terra)
library(pbapply)
library(gstat)
rm(list=ls())
gc()
#
# get missing species
range.pres.path <- 'missed_species_range_pres/'
files <- list.files(range.pres.path)
spsname <- grepl('.tif$', '', files)
nsps     <- length(spsname)
#
# read elevation and latitudinal warming velocity files
warm.rate.lat <- terra::rast('maps/warm_vel_lat2024.tif')
warm.rate.ele <- terra::rast('maps/warm_vel_ele2024.tif')
#
mountain    <- terra::rast('maps/k3binary5m.tif')
mountain    <- terra::project(mountain, warm.rate.lat)
HFI         <- terra::rast('maps/HFP2009_5m.tif')
HFI         <- terra::project(HFI, warm.rate.lat)
temp.mean   <- terra::rast('maps/bio1.tif')
temp.mean   <- terra::project(temp.mean, warm.rate.lat)
temp.var    <- terra::rast('maps/bio4.tif')
temp.var    <- terra::project(temp.var, warm.rate.lat)
elev.het    <- terra::rast('maps/elev_heter.tif')
elev.het    <- terra::project(elev.het, warm.rate.lat)
warm_rate_species <- function(i) {
# cropped mountain area / species area; it will be easier to use species.
sps_name <- spsname[i]
sps      <- terra::rast(paste0(range.pres.path, files[i]))
# sps.fut   <- terra::rast(paste0(SDM.path, 'ESM_245_2081-2100/RangeFut/', spsname[i], '.tif'))     # I use a medium scenario for all.
# sps[sps.fut==1] <- 1
sps[sps == 0]   <- NA
# change the map to lant-long
#  browser()
sps       <- trim(sps)
#  sps       <- terra::project(sps, mountain)    # why projection changes cell values? because the value is continuous. It is important to have align here
sps       <- terra::project(sps, "EPSG:4326")    # why projection changes cell values? because the value is continuous. It is important to have align here
sps       <- terra::resample(sps, mountain)
#
mount     <- terra::crop(mountain, sps)
sps.mount <- terra::mask(sps, mount)                     # when do mask, the extent has to match exactly!
sps.flat  <- terra::mask(sps, mount, inverse=T)
# go through 16 scenarios together: in mount area first, then in flat area. No! Do not use loop, just use multi-layer spatRaster
cropped   <- terra::crop(warm.rate.ele, sps.mount)
masked    <- terra::mask(cropped, sps.mount)
EleVeloT  <- terra::global(masked, fun = 'mean', na.rm = TRUE)[,1]
cropped   <- terra::crop(warm.rate.lat, sps.flat)
masked    <- terra::mask(cropped, sps.flat)
LatVeloT  <- terra::global(masked, fun = 'mean', na.rm = TRUE)[,1]
#
area.in.mount <- sum(terra::expanse(sps.mount, unit = 'km', transform=TRUE))
area.on.flat  <- sum(terra::expanse(sps.flat, unit = 'km', transform=TRUE))
frac.mount    <- area.in.mount/(area.on.flat+area.in.mount)
# for the rest parameters in mount area first, then in flat area.
cropped   <- terra::crop(HFI, sps)
masked    <- terra::mask(cropped, sps.mount)  # this is not efficient, need to resample for every image!
HFI.ele <- terra::global(masked, fun = 'mean', na.rm = TRUE)[1,1]
masked    <- terra::mask(cropped, sps.flat)   # this is not efficient, need to resample for every image!
HFI.lat  <- terra::global(masked, fun = 'mean', na.rm = TRUE)[1,1]
#
cropped   <- terra::crop(temp.mean, sps)
masked    <- terra::mask(cropped, sps.mount)
temp.mean.ele <- terra::global(masked, fun = 'mean', na.rm = TRUE)[1,1]
masked    <- terra::mask(cropped, sps.flat)
temp.mean.lat <- terra::global(masked, fun = 'mean', na.rm = TRUE)[1,1]
#
cropped   <- terra::crop(temp.var, sps)
masked    <- terra::mask(cropped, sps.mount)
temp.var.ele <- terra::global(masked, fun = 'mean', na.rm = TRUE)[1,1]
masked    <- terra::mask(cropped, sps.flat)
temp.var.lat  <- terra::global(masked, fun = 'mean', na.rm = TRUE)[1,1]
#
cropped   <- terra::crop(elev.het, sps)
masked    <- terra::mask(cropped, sps.mount)
elev.het.ele <- terra::global(masked, fun = 'mean', na.rm = TRUE)[1,1]
masked    <- terra::mask(cropped, sps.flat)
elev.het.lat <- terra::global(masked, fun = 'mean', na.rm = TRUE)[1,1]
return(c(spsname[i], area.in.mount, area.on.flat, frac.mount, HFI.ele, HFI.lat, temp.mean.ele, temp.mean.lat, temp.var.ele, temp.var.lat, elev.het.ele, elev.het.lat, EleVeloT, LatVeloT))
}
#
VeloT <- pbsapply(1:nsps, warm_rate_species)
View(VeloT)
View(VeloT)
range.pres.path <- 'missed_species_range_pres/'
files <- list.files(range.pres.path)
spsname <- grep('.tif$', '', files)
nsps     <- length(spsname)
range.pres.path <- 'missed_species_range_pres/'
files <- list.files(range.pres.path)
spsname <- gsub('.tif$', '', files)
nsps     <- length(spsname)
library(terra)
library(pbapply)
library(gstat)
rm(list=ls())
gc()
#
# get missing species
range.pres.path <- 'missed_species_range_pres/'
files <- list.files(range.pres.path)
spsname <- gsub('.tif$', '', files)
nsps     <- length(spsname)
#
# read elevation and latitudinal warming velocity files
warm.rate.lat <- terra::rast('maps/warm_vel_lat2024.tif')
warm.rate.ele <- terra::rast('maps/warm_vel_ele2024.tif')
#
mountain    <- terra::rast('maps/k3binary5m.tif')
mountain    <- terra::project(mountain, warm.rate.lat)
HFI         <- terra::rast('maps/HFP2009_5m.tif')
HFI         <- terra::project(HFI, warm.rate.lat)
temp.mean   <- terra::rast('maps/bio1.tif')
temp.mean   <- terra::project(temp.mean, warm.rate.lat)
temp.var    <- terra::rast('maps/bio4.tif')
temp.var    <- terra::project(temp.var, warm.rate.lat)
elev.het    <- terra::rast('maps/elev_heter.tif')
elev.het    <- terra::project(elev.het, warm.rate.lat)
# calculate warming rate within species distribution area
warm_rate_species <- function(i) {
# cropped mountain area / species area; it will be easier to use species.
sps_name <- spsname[i]
sps      <- terra::rast(paste0(range.pres.path, files[i]))
# sps.fut   <- terra::rast(paste0(SDM.path, 'ESM_245_2081-2100/RangeFut/', spsname[i], '.tif'))     # I use a medium scenario for all.
# sps[sps.fut==1] <- 1
sps[sps == 0]   <- NA
# change the map to lant-long
#  browser()
sps       <- trim(sps)
#  sps       <- terra::project(sps, mountain)    # why projection changes cell values? because the value is continuous. It is important to have align here
sps       <- terra::project(sps, "EPSG:4326")    # why projection changes cell values? because the value is continuous. It is important to have align here
sps       <- terra::resample(sps, mountain)
#
mount     <- terra::crop(mountain, sps)
sps.mount <- terra::mask(sps, mount)                     # when do mask, the extent has to match exactly!
sps.flat  <- terra::mask(sps, mount, inverse=T)
# go through 16 scenarios together: in mount area first, then in flat area. No! Do not use loop, just use multi-layer spatRaster
cropped   <- terra::crop(warm.rate.ele, sps.mount)
masked    <- terra::mask(cropped, sps.mount)
EleVeloT  <- terra::global(masked, fun = 'mean', na.rm = TRUE)[,1]
cropped   <- terra::crop(warm.rate.lat, sps.flat)
masked    <- terra::mask(cropped, sps.flat)
LatVeloT  <- terra::global(masked, fun = 'mean', na.rm = TRUE)[,1]
#
area.in.mount <- sum(terra::expanse(sps.mount, unit = 'km', transform=TRUE))
area.on.flat  <- sum(terra::expanse(sps.flat, unit = 'km', transform=TRUE))
frac.mount    <- area.in.mount/(area.on.flat+area.in.mount)
# for the rest parameters in mount area first, then in flat area.
cropped   <- terra::crop(HFI, sps)
masked    <- terra::mask(cropped, sps.mount)  # this is not efficient, need to resample for every image!
HFI.ele <- terra::global(masked, fun = 'mean', na.rm = TRUE)[1,1]
masked    <- terra::mask(cropped, sps.flat)   # this is not efficient, need to resample for every image!
HFI.lat  <- terra::global(masked, fun = 'mean', na.rm = TRUE)[1,1]
#
cropped   <- terra::crop(temp.mean, sps)
masked    <- terra::mask(cropped, sps.mount)
temp.mean.ele <- terra::global(masked, fun = 'mean', na.rm = TRUE)[1,1]
masked    <- terra::mask(cropped, sps.flat)
temp.mean.lat <- terra::global(masked, fun = 'mean', na.rm = TRUE)[1,1]
#
cropped   <- terra::crop(temp.var, sps)
masked    <- terra::mask(cropped, sps.mount)
temp.var.ele <- terra::global(masked, fun = 'mean', na.rm = TRUE)[1,1]
masked    <- terra::mask(cropped, sps.flat)
temp.var.lat  <- terra::global(masked, fun = 'mean', na.rm = TRUE)[1,1]
#
cropped   <- terra::crop(elev.het, sps)
masked    <- terra::mask(cropped, sps.mount)
elev.het.ele <- terra::global(masked, fun = 'mean', na.rm = TRUE)[1,1]
masked    <- terra::mask(cropped, sps.flat)
elev.het.lat <- terra::global(masked, fun = 'mean', na.rm = TRUE)[1,1]
return(c(spsname[i], area.in.mount, area.on.flat, frac.mount, HFI.ele, HFI.lat, temp.mean.ele, temp.mean.lat, temp.var.ele, temp.var.lat, elev.het.ele, elev.het.lat, EleVeloT, LatVeloT))
}
#
VeloT <- pbsapply(1:nsps, warm_rate_species)
plot(terra::rast("/Users/junnawang/UCDLab/Biodiversity/pre_post_processing/02_predict_shift_rate/02_01_process_data_for_shift_rate_prediction/missed_species_range_pres/Acmispon dendroideus.tif"))
source("~/UCDLab/Biodiversity/pre_post_processing/02_predict_shift_rate/02_01_process_data_for_shift_rate_prediction/bioshift_pre_species_missed.R")
write.csv(VeloT, paste0('missed_sps_large_range.csv'))
View(VeloT)
source("~/UCDLab/Biodiversity/pre_post_processing/02_predict_shift_rate/02_01_process_data_for_shift_rate_prediction/bioshift_pre_species_missed.R")
source("~/UCDLab/Biodiversity/pre_post_processing/02_predict_shift_rate/02_03_perform_shift_rate_prediction/lmer_predict_shift_rate_low.R")
source("~/UCDLab/Biodiversity/pre_post_processing/02_predict_shift_rate/02_03_perform_shift_rate_prediction/lmer_predict_shift_rate_low.R")
source("~/UCDLab/Biodiversity/pre_post_processing/02_predict_shift_rate/02_03_perform_shift_rate_prediction/lmer_predict_shift_rate_low.R")
source("~/UCDLab/Biodiversity/pre_post_processing/02_predict_shift_rate/02_03_perform_shift_rate_prediction/lmer_predict_shift_rate_low.R")
source("~/UCDLab/Biodiversity/pre_post_processing/02_predict_shift_rate/02_03_perform_shift_rate_prediction/lmer_predict_shift_rate_fast.R")
source("~/UCDLab/Biodiversity/pre_post_processing/02_predict_shift_rate/02_03_perform_shift_rate_prediction/lmer_predict_shift_rate_median.R")
source("~/UCDLab/Biodiversity/pre_post_processing/02_predict_shift_rate/02_03_perform_shift_rate_prediction/lmer_predict_shift_rate_low.R")
write.csv(ShiftR_Final, 'pre_post_processing/02_predict_shift_rate/02_03_perform_shift_rate_prediction/Final_prediction_shift_rate_slow_2024.csv')
slow <- read.csv('Final_prediction_shift_rate_slow_2024.csv')
setwd("/Users/junnawang/UCDLab/Biodiversity/pre_post_processing/02_predict_shift_rate/02_03_perform_shift_rate_prediction/Final_prediction_shift_rate_fast_2024.csv")
setwd("/Users/junnawang/UCDLab/Biodiversity/pre_post_processing/02_predict_shift_rate/02_03_perform_shift_rate_prediction/")
slow <- read.csv('Final_prediction_shift_rate_slow_2024.csv')
medi <- read.csv('Final_prediction_shift_rate_median_2024.csv')
fast <- read.csv('Final_prediction_shift_rate_fast_2024.csv')
all <- data.frame(Species=medi$Species,
disp=medi$disp,
scenario=medi$scenario,
Lat50=medi$Lat50,
Lat975=fast$Lat975,
Lat025=slow$Lat025,
Ele50=medi$Ele50,
Ele975=fast$Ele975,
Ele025=slow$Ele025)
write.csv(all, 'predict_shift_rate2024.csv', row.names = F)
knitr::opts_chunk$set(echo = TRUE)
dir.fut.vel <- '/Users/junnawang/UCDLab/Biodiversity/pre_post_processing/predict_shift_rate/'
dir.obs.vel <- '/Users/junnawang/UCDLab/Biodiversity/Bioshift/Lenoir_et_al/Analysis/'
library(tidyverse)
library(ggpubr)
#
vel.fut.fast <- read.csv(paste0(dir.fut.vel, 'Final_prediction_shift_rate_fast_2024.csv'))
dir.fut.vel <- '/Users/junnawang/UCDLab/Biodiversity/pre_post_processing/02_predict_shift_rate/02_03_perform_shift_rate_prediction/'
dir.obs.vel <- '/Users/junnawang/UCDLab/Biodiversity/Bioshift/Lenoir_et_al/Analysis/'
library(tidyverse)
library(ggpubr)
#
vel.fut.fast <- read.csv(paste0(dir.fut.vel, 'Final_prediction_shift_rate_fast_2024.csv'))
vel.fut.med  <- read.csv(paste0(dir.fut.vel, 'Final_prediction_shift_rate_median_2024.csv'))
vel.fut.slow <- read.csv(paste0(dir.fut.vel, 'Final_prediction_shift_rate_slow_2024.csv'))
#
vel.obv <- read.csv(paste0(dir.obs.vel, 'Table_S1.csv'), sep=";")
#
vel.obv <- vel.obv %>% filter(Kingdom == 'Plantae' & Ecosystem == 'Terrestrial')
#
## Plot latitudinal shift first, using scenario SSP245
v0 <- vel.obv$ShiftR[!is.na(vel.obv$LatVeloT)]
v2 <- vel.fut.med$Lat50[vel.fut.med$scenario==6]
v3 <- vel.fut.fast$Lat975[vel.fut.med$scenario==6]
v1 <- vel.fut.slow$Lat025[vel.fut.med$scenario==6]
#
data.lat <- data.frame(Scenario=c(rep('Observation in 1850-2018', length(v0)), rep('Prediction for 2081-2100 (median)', length(v2)),
rep('Prediction for 2081-2100 (upper limit)', length(v3)), rep('Prediction for 2081-2100 (lower limit)', length(v1))),
Velocity=c(v0, v2, v3, v1))
#
p1 <- ggplot(data=data.lat, aes(x=Velocity, color=Scenario, fill=Scenario)) +
geom_density(alpha=0.5) +
scale_color_manual(values = c("Observation in 1850-2018" = "black", "Prediction for 2081-2100 (median)" = "#c1d793", "Prediction for 2081-2100 (upper limit)" = "#fcbeba", 'Prediction for 2081-2100 (lower limit)'="#9adfe2")) +
scale_fill_manual(values = c("Observation in 1850-2018" = "black", "Prediction for 2081-2100 (median)" = "#c1d793", "Prediction for 2081-2100 (upper limit)" = "#fcbeba", 'Prediction for 2081-2100 (lower limit)'="#9adfe2")) +
labs(x='Latitudinal migration velocity (km/year)', y='Probability density', tag='a') +
lims(x=c(-20, 20)) +
theme_classic() +
theme(legend.position = c(0.25, 0.8))
##
####get mean values of these velocities
data.lat %>% group_by(Scenario) %>% summarise(vel=mean(Velocity, na.rm=T))
##
# Scenario and velocity
# Observation in 1850-2018:	-0.09890187
# Prediction for 2081-2100 (lower limit)	-1.18698229
# Prediction for 2081-2100 (median)	0.28811010
# Prediction for 2081-2100 (upper limit)	2.29952483
######################################################
### almost make a mistake
v0 <- vel.obv$ShiftR[!is.na(vel.obv$EleVeloT)]
v2 <- vel.fut.med$Ele50[vel.fut.med$scenario==6]
v3 <- vel.fut.fast$Ele975[vel.fut.med$scenario==6]
v1 <- vel.fut.slow$Ele025[vel.fut.med$scenario==6]
#
data.ele <- data.frame(Scenario=c(rep('Observation in 1850-2018', length(v0)), rep('Prediction for 2081-2100 (median)', length(v2)),
rep('Prediction for 2081-2100 (upper limit)', length(v3)), rep('Prediction for 2081-2100 (lower limit)', length(v1))),
Velocity=c(v0, v2, v3, v1))
#
p2 <- ggplot(data=data.ele, aes(x=Velocity, color=Scenario, fill=Scenario)) +
geom_density(alpha=0.5) +
scale_color_manual(values = c("Observation in 1850-2018" = "black", "Prediction for 2081-2100 (median)" = "#c1d793", "Prediction for 2081-2100 (upper limit)" = "#fcbeba", 'Prediction for 2081-2100 (lower limit)'="#9adfe2")) +
scale_fill_manual(values = c("Observation in 1850-2018" = "black", "Prediction for 2081-2100 (median)" = "#c1d793", "Prediction for 2081-2100 (upper limit)" = "#fcbeba", 'Prediction for 2081-2100 (lower limit)'="#9adfe2")) +
labs(x='Elevational migration velocity (m/year)', y='Probability density', tag='b') +
lims(x=c(-20, 20)) +
theme_classic() +
theme(legend.position = c(0.25, 0.8))
# use black color for observed velocity
ggarrange(p1, p2, nrow=2, ncol=1)
ggsave('Observed_predicted_migration_volocity.png')
data.ele %>% group_by(Scenario) %>% summarise(vel=mean(Velocity, na.rm=T))
# Scenario  vel
# Observation in 1850-2018	1.159506
# Prediction for 2081-2100 (lower limit)	-1.184174
# Prediction for 2081-2100 (median)	3.648920
# Prediction for 2081-2100 (upper limit)	6.954228
View(data.ele)
plot(terra::rast("/Users/junnawang/Downloads/Abarema laeta.tif"))
plot(terra::rast("/Users/junnawang/Downloads/Abarema cochleata.tif"))
terra::rast("/Users/junnawang/Downloads/Abarema cochleata.tif")
8350 * 10300
terra::rast("/Users/junnawang/UCDLab/Biodiversity/data/climate/current/bio1.tif")
r <- terra::rast("/Users/junnawang/UCDLab/Biodiversity/data/climate/current/bio1.tif")
sum(!is.na(terra::values(r)))
