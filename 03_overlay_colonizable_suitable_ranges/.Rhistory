a <- data.frame(col1=seq(1, 20, 5), col2=seq(3, 23, 5) )
a <- data.frame(col1=seq(1, 20, 5), col2=seq(3, 22, 5) )
a
col1:col2
apply(a, 1, function(x,y)( return(seq(x,y,1)))    )
apply(a, 1, function(x,y)( return(seq(x,y)))    )
apply(a, 1, function(x,y) { return(seq(x,y,1)) }  )
a
apply(a, 1, function(x,y) { return(seq(x,y,1)) }  )
apply(a[, 1:2], 1, function(x) { return(seq(from=x[1], to=x[2], by=1)) })
as.vector( apply(a[, 1:2], 1, function(x) { return(seq(from=x[1], to=x[2], by=1)) }) )
c(apply(a[, 1:2], 1, function(x) { return(seq(from=x[1], to=x[2], by=1)) }))
knitr::opts_chunk$set(echo = TRUE)
library(terra)
library(fst)
dt.distance0 <- read_fst('/Users/junnawang/Downloads/2183.fts', as.data.table = TRUE)
View(dt.distance0)
library(terra)
library(fst)
dt.distance0 <- read_fst('/Users/junnawang/Downloads/2183.fts', as.data.table = TRUE)
View(dt.distance0)
dt.distance02 <- read_fst('/Users/junnawang/Downloads/2183_2col.fts', as.data.table = TRUE)
View(dt.distance02)
library(terra)
library(fst)
grid_info <- function(r, block_size_row, block_size_col) {
nrow_r <- nrow(r)
ncol_r <- ncol(r)
total_cells <- nrow_r * ncol_r
#
n_chunks_row <- ceiling(nrow_r / block_size_row)
n_chunks_col <- ceiling(ncol_r / block_size_col)
#
row_indices <- rep(1:nrow_r, each=ncol_r)
col_indices <- rep(1:ncol_r, nrow_r)
#
chunk_row_id <- (row_indices - 1) %/% block_size_row + 1
chunk_col_id <- (col_indices - 1) %/% block_size_col + 1
chunk_id <- (chunk_row_id - 1) * n_chunks_col + chunk_col_id
#
grid_info <- data.table(
cell_id = 1:total_cells,
row = row_indices,
col = col_indices,
chunk_id = chunk_id
)
# remove grids in waters
landcells <- which(!is.na(terra::values(r)))
grid_info <- grid_info[cell_id %in% landcells]
#
return(grid_info)
}
block_size_row = 20
block_size_col = 50
chunk_grid_mapping <- grid_info(r.template, block_size_row, block_size_col)
library(terra)
library(tidyverse)
library(dismo)
library(pbapply)
library(data.table)
rm(list = ls())
gc()
##########################################################Functions##################################################
#----------------------------Function 1: divide global grids into chunks-------
grid_info <- function(r, block_size_row, block_size_col) {
nrow_r <- nrow(r)
ncol_r <- ncol(r)
total_cells <- nrow_r * ncol_r
#
n_chunks_row <- ceiling(nrow_r / block_size_row)
n_chunks_col <- ceiling(ncol_r / block_size_col)
#
row_indices <- rep(1:nrow_r, each=ncol_r)
col_indices <- rep(1:ncol_r, nrow_r)
#
chunk_row_id <- (row_indices - 1) %/% block_size_row + 1
chunk_col_id <- (col_indices - 1) %/% block_size_col + 1
chunk_id <- (chunk_row_id - 1) * n_chunks_col + chunk_col_id
#
grid_info <- data.table(
cell_id = 1:total_cells,
row = row_indices,
col = col_indices,
chunk_id = chunk_id
)
# remove grids in waters
landcells <- which(!is.na(terra::values(r)))
grid_info <- grid_info[cell_id %in% landcells]
#
return(grid_info)
}
block_size_row = 20
block_size_col = 50
chunk_grid_mapping <- grid_info(r.template, block_size_row, block_size_col)
r.template <- terra::rast('bio1.tif')
setwd("/Users/junnawang/UCDLab/Biodiversity/pre_post_processing/03_overlay_colonizable_suitable_ranges/")
r.template <- terra::rast('bio1.tif')
###### get block information ######
block_size_row = 20
block_size_col = 50
chunk_grid_mapping <- grid_info(r.template, block_size_row, block_size_col)
chunk_index <- sort(unique(chunk_grid_mapping$chunk_id))
cell_chunk_rows <- read.csv("cell_chunk_rows.csv")
cell_chunk_rows$chunk_id <- chunk_index[cell_chunk_rows$chunk_id]
chunk_grid_mapping <- merge(chunk_grid_mapping, cell_chunk_rows, by=c("cell_id", "chunk_id"), all.x = TRUE)
setkey(chunk_grid_mapping, cell_id)
View(chunk_grid_mapping)
dt.distance0 <- read_fst('/Users/junnawang/Downloads/2183.fts', as.data.table = TRUE)
dt.distance02 <- read_fst('/Users/junnawang/Downloads/2183_2col.fts', as.data.table = TRUE)
View(dt.distance0)
View(dt.distance02)
dt.distance03 <- read_fst('/Users/junnawang/Downloads/2183.fts', as.data.table = TRUE)
dt.distance03 <- read_fst('/Users/junnawang/Downloads/2183.fts', as.data.table = TRUE)
dt.distance0 <- read_fst('/Users/junnawang/Downloads/2183_2col.fts', as.data.table = TRUE)
chunk_grid_mapping_subset_1chunk <- chunk_grid_mapping_subset[chunk_id==chunk_index[2183]]
chunk_index[2183
]
chunk_grid_mapping_subset_1chunk <- chunk_grid_mapping[chunk_id==chunk_index[2183]]
View(chunk_grid_mapping_subset_1chunk)
View(dt.distance03)
irows <- c(apply(chunk_grid_mapping_1chunk[, c("first_appearance", "last_appearance")], 1, function(x) { return(seq(from=x[1], to=x[2])) }))
chunk_grid_mapping_subset_1chunk <- chunk_grid_mapping[chunk_id==chunk_index[2183]]
irows <- c(apply(chunk_grid_mapping_subset_1chunk[, c("first_appearance", "last_appearance")], 1, function(x) { return(seq(from=x[1], to=x[2])) }))
irows
irows <- as.vector(apply(chunk_grid_mapping_subset_1chunk[, c("first_appearance", "last_appearance")], 1, function(x) { return(seq(from=x[1], to=x[2])) }))
View(irows)
unlist(irows)
View(dt.distance02)[23150:23180]
unlist(irows)[23150:23180]
irows <- apply(chunk_grid_mapping_subset_1chunk[, c("first_appearance", "last_appearance")], 1, function(x) { return(seq(from=x[1], to=x[2])) })
dt.distance0 <- dt.distance0[unlist(irows)]
dt.distance0$origin <- irows
irows <- apply(chunk_grid_mapping_subset_1chunk[, c("first_appearance", "last_appearance")], 1, function(x) { return(seq(from=x[1], to=x[2])) })
irows <- unlist(irows)
dt.distance0 <- dt.distance0[unlist(irows)]
dt.distance0$origin <- irows
print(head(irows))
sapply(chunk_grid_mapping_subset_1chunk[, c("first_appearance", "last_appearance")], 1, function(x) { return(seq(from=x[1], to=x[2])) })
sapply(chunk_grid_mapping_subset_1chunk[, c("first_appearance", "last_appearance")], 1, function(x) { return(seq(from=x[1], to=x[2])) })
apply(chunk_grid_mapping_subset_1chunk[, c("first_appearance", "last_appearance")], 1, function(x) { return(seq(from=x[1], to=x[2])) })
dt.distance0 <- read_fst('/Users/junnawang/Downloads/2183.fts', as.data.table = TRUE)
dt.distance02 <- read_fst('/Users/junnawang/Downloads/2183_2col.fts', as.data.table = TRUE)
dt.distance02$distance <- as.integer(dt.distance02$distance)
write_fst(dt.distance02, "/Users/junnawang/Downloads/2183_2col_int_dist.fts", compress = 0)
dt.distance02_int <- read_fst('/Users/junnawang/Downloads/2183_2col_int_dist.fts', as.data.table = TRUE)
View(dt.distance02_int)
class(dt.distance02_int)
str(dt.distance02_int)
dt.distance02$distance <- as.integer(dt.distance02$distance)
dt.distance02$target <- as.integer(dt.distance02$target)
write_fst(dt.distance02, "/Users/junnawang/Downloads/2183_2col_int_dist.fts", compress = 0)
dt.distance02_int <- read_fst('/Users/junnawang/Downloads/2183_2col_int_dist.fts', as.data.table = TRUE)
df.distance <- read_fst('/Users/junnawang/Downloads/2183.fts', as.data.table = TRUE)
df.distance[,2] <- as.integer(df.distance[,2])
df.distance <- read_fst('/Users/junnawang/Downloads/2183.fts', as.data.table = TRUE)
df.distance$target <- as.integer(df.distance$target)
df.distance$distance <- as.integer(df.distance$distance)
write_fst(df.distance[,2:3], "/Users/junnawang/Downloads/2183_2col_int_dist.fts", compress = 0)
as.numeric(Sys.time() - Sys.time(), units="secs")
as.numeric(Sys.time() - Sys.time(), units="mins")
r <- rast(nrows=18, ncols=36, xmin=0)
r[150:250] <- 1
r[251:450] <- 2
bi <- boundaries(r)
bo <- boundaries(r, inner=FALSE)
bc <- boundaries(r, classes=TRUE)
plot(bc)
512/48
r.present <- terra::rast('/Users/junnawang/Downloads/Scaevola browniana.tif')
idc.present <- which(!is.na(terra::values(r.present)))
plot(r.present)
r.present <- terra::rast('/Users/junnawang/Downloads/Scaevola browniana.tif')
r.present <- r.present > 0.5
idc.present <- which(!is.na(terra::values(r.present)))
plot(r.present)
r.present <- terra::rast('/Users/junnawang/Downloads/Scaevola browniana.tif')
r.present <- r.present > 0.1
idc.present <- which(!is.na(terra::values(r.present)))
plot(r.present)
r.present <- terra::rast('/Users/junnawang/Downloads/Scaevola browniana.tif')
r.present <- r.present > 0.1
r.present[r.present==0] <- NA
idc.present <- which(!is.na(terra::values(r.present)))
plot(r.present)
r.present <- terra::rast('/Users/junnawang/Downloads/Scaevola browniana.tif')
r.present <- r.present > 0.01
r.present[r.present==0] <- NA
idc.present <- which(!is.na(terra::values(r.present)))
plot(r.present)
r.edge <- terra::boundaries(r.present, inner=FALSE)            # I need outer boundary.
plot(r.edge)
xy.edge <- xyFromCell(r.edge, which(terra::values(r.edge)==1))
xy.rand <- randomPoints(r.present, n=10000, p=xy.edge)
library(dismo)
xy.rand <- randomPoints(r.present, n=10000, p=xy.edge)
xy.rand <- dismo::randomPoints(r.present, n=10000, p=xy.edge)
library(raster)
xy.rand <- dismo::randomPoints(raster::raster(r.present), n=10000, p=xy.edge)
xy <- rbind(xy.edge, xy.rand)
duplicated(xy)
sum(duplicated(xy))
r.edge <- terra::boundaries(r.present, inner=FALSE)            # I need outer boundary.
xy.edge <- terra::xyFromCell(r.edge, which(terra::values(r.edge)==1))
xy.rand <- dismo::randomPoints(r.present, n=10000, p=xy.edge)
r.edge <- terra::boundaries(r.present, inner=FALSE)            # I need outer boundary.
xy.edge <- terra::xyFromCell(r.edge, which(terra::values(r.edge)==1))
xy.rand <- dismo::randomPoints(raster::raster(r.present), n=10000, p=xy.edge)
xy <- rbind(xy.edge, xy.rand)
r.edge <- terra::boundaries(r.present, inner=FALSE, direction=4)
xy.edge <- terra::xyFromCell(r.edge, which(terra::values(r.edge)==1))
r.present <- terra::rast('/Users/junnawang/Downloads/Cedrela angustifolia.tif')
r.present[r.present==0] <- NA
idc.present <- which(!is.na(terra::values(r.present)))
plot(r.present)
r.present <- terra::rast('/Users/junnawang/Downloads/Cedrela angustifolia.tif')
r.present[r.present==0] <- NA
idc.present <- which(!is.na(terra::values(r.present)))
plot(r.present)
r.present <- terra::rast('/Users/junnawang/Downloads/Cedrela angustifolia.tif')
plot(r.present)
r.present <- terra::rast('/Users/junnawang/Downloads/Cedrela angustifolia.tif')
plot(r.present)
r.present <- terra::rast('/Users/junnawang/Downloads/Cedrela angustifolia.tif')
plot(r.present)
r.present[r.present==0] <- NA
idc.present <- which(!is.na(terra::values(r.present)))
r.edge <- terra::boundaries(r.present, inner=FALSE)            # I need outer boundary.
xy.edge <- terra::xyFromCell(r.edge, which(terra::values(r.edge)==1))
xy.rand <- dismo::randomPoints(raster::raster(r.present), n=10000, p=xy.edge)
xy <- rbind(xy.edge, xy.rand)
xy <- rbind(xy.edge, xy.rand)
plot(r.present)
points(xy)
plot(r.present)
grid_info <- function(r, block_size_row, block_size_col) {
nrow_r <- nrow(r)
ncol_r <- ncol(r)
total_cells <- nrow_r * ncol_r
#
n_chunks_row <- ceiling(nrow_r / block_size_row)
n_chunks_col <- ceiling(ncol_r / block_size_col)
#
row_indices <- rep(1:nrow_r, each=ncol_r)
col_indices <- rep(1:ncol_r, nrow_r)
#
chunk_row_id <- (row_indices - 1) %/% block_size_row + 1
chunk_col_id <- (col_indices - 1) %/% block_size_col + 1
chunk_id <- (chunk_row_id - 1) * n_chunks_col + chunk_col_id
#
grid_info <- data.table(
cell_id = 1:total_cells,
row = row_indices,
col = col_indices,
chunk_id = chunk_id
)
# remove grids in waters
landcells <- which(!is.na(terra::values(r)))
grid_info <- grid_info[cell_id %in% landcells]
#
return(grid_info)
}
block_size_row = 20
block_size_col = 50
chunk_grid_mapping <- grid_info(r.template, block_size_row, block_size_col)
chunk_index <- sort(unique(chunk_grid_mapping$chunk_id))
cell_chunk_rows <- read.csv("cell_chunk_rows.csv")
cell_chunk_rows$chunk_id <- chunk_index[cell_chunk_rows$chunk_id]
chunk_grid_mapping <- merge(chunk_grid_mapping, cell_chunk_rows, by=c("cell_id", "chunk_id"), all.x = TRUE)
setkey(chunk_grid_mapping, cell_id)
View(chunk_grid_mapping)
grid_info <- function(r, block_size_row, block_size_col) {
nrow_r <- nrow(r)
ncol_r <- ncol(r)
total_cells <- nrow_r * ncol_r
#
n_chunks_row <- ceiling(nrow_r / block_size_row)
n_chunks_col <- ceiling(ncol_r / block_size_col)
#
row_indices <- rep(1:nrow_r, each=ncol_r)
col_indices <- rep(1:ncol_r, nrow_r)
#
chunk_row_id <- (row_indices - 1) %/% block_size_row + 1
chunk_col_id <- (col_indices - 1) %/% block_size_col + 1
chunk_id <- (chunk_row_id - 1) * n_chunks_col + chunk_col_id
#
grid_info <- data.table(
cell_id = 1:total_cells,
row = row_indices,
col = col_indices,
chunk_id = chunk_id
)
# remove grids in waters
landcells <- which(!is.na(terra::values(r)))
grid_info <- grid_info[cell_id %in% landcells]
#
return(grid_info)
}
dt.distance0 <- read_fst('/Users/junnawang/Downloads/880.fts', as.data.table = TRUE)
View(dt.distance0)
chunk_grid_mapping_subset_1chunk <- chunk_grid_mapping[chunk_id==chunk_index[880]]
View(chunk_grid_mapping_subset_1chunk)
irows <- apply(chunk_grid_mapping_subset_1chunk[, c("first_appearance", "last_appearance")], 1, function(x) { return(seq(from=x[1], to=x[2])) })
dt.distance0 <- read_fst('/Users/junnawang/Downloads/880.fts', as.data.table = TRUE)
chunk_grid_mapping_subset_1chunk <- chunk_grid_mapping[chunk_id==chunk_index[880]]
chunk_grid_mapping_subset_1chunk <- chunk_grid_mapping_subset_1chunk[!is.na(first_appearance)]
irows <- apply(chunk_grid_mapping_subset_1chunk[, c("first_appearance", "last_appearance")], 1, function(x) { return(seq(from=x[1], to=x[2])) })
View(irows)
irows <- unlist(irows)
irows <- unlist(irows)
dt.distance0 <- dt.distance0[irows]
dt.distance0$origin <- irows
print(head(irows))
sps <- terra::rast('/Users/junnawang/Downloads/Rhynchospora loefgrenii.tif')
sps <- terra::rast('/Users/junnawang/Downloads/Rhynchospora loefgrenii.tif')
plot(sps)
sps
plot(sps[[1:4]])
plot(sps[[1:16, by=4]])
plot(sps[[1:4]])
plot(sps[[seq(1:16, by=4)]]) #
plot(sps[[seq(1:16:4)]]) #
seq(1:16:4)
plot(sps[[seq(from=1, to=16, by=4)]]) # fast, different ssp
plot(sps[[seq(from=2, to=16, by=4)]]) # slow, different ssp
plot(sps[[5:8]])  # different velocity
